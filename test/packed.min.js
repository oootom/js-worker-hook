;(function(){addEventListener('fetch', (event) => {
  const response = new Response('Hello World!');
  event.respondWith(response);
});
}(function(){if(addEventListener.__hooked){return;}function h(o){return typeof o=="object"&&o!==null&&!Array.isArray(o)}function l(o){return typeof o>"u"}var T=(()=>{let o=(()=>{function e(n){return function(...t){let r=t;for(let i=0;i<n.length;++i){let c=n[i].apply(this,r);r=Array.isArray(c)&&c?.length===t?.length?c:t}return r}}function u(n,t){let r=e(t.before),i=e(t.after);return function(...a){a=r.apply(this,a);let f=n.apply(this,a);return f=i.apply(this,f),f}}return u})(),d=(()=>{function e(n){return async function(...t){let r=t;for(let i=0;i<n.length;++i){let c=await n[i].apply(this,r);r=Array.isArray(c)&&c?.length===t?.length?c:t}return r}}function u(n,t){let r=e(t.before),i=e(t.after);return async function(...a){a=await r.apply(this,a);let f=await n.apply(this,a);return f=await i.apply(this,f),f}}return u})();function p(e){let u=[],n=[];return{hooked:r=>e(r,{before:u,after:n}),before:u,after:n}}let s={addEventListener:{...p(o)},fetchListener:{...p(o)},event:{respondWith:{...p(o)}},fetch:{...p(d)},crypto:{subtle:{encrypt:{...p(d)},decrypt:{...p(d)}}}};return globalThis.addEventListener=s.addEventListener.hooked(addEventListener),l(addEventListener?.__hooked)?Object.defineProperty(addEventListener,"__hooked",{value:!0,writable:!0,enumerable:!1,configurable:!1}):addEventListener.__hooked=!0,s.addEventListener.before.push((e,u)=>e==="fetch"?[e,s.fetchListener.hooked(u)]:[e,u]),s.fetchListener.before.push(e=>(e.respondWith=s.event.respondWith.hooked(e.respondWith),[e])),globalThis.fetch=s.fetch.hooked(fetch),globalThis.crypto.subtle.decrypt=s.crypto.subtle.decrypt.hooked(crypto.subtle.decrypt),globalThis.crypto.subtle.encrypt=s.crypto.subtle.decrypt.hooked(crypto.subtle.encrypt),Object.freeze(s),s})(),y=T;(()=>{let o=INJECT_ENV&&h(INJECT_ENV);Object.defineProperty(globalThis,"env",{value:o?INJECT_ENV:{},writable:!1,enumerable:!0,configurable:!1})})();y.crypto.subtle.encrypt.before.push(()=>{});y.crypto.subtle.decrypt.before.push(()=>{});y.fetchListener.before.push(()=>{});
}()));